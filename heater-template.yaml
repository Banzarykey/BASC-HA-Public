wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "${devicename} Recovery"

captive_portal:

web_server:
  port: 80
  ota: true

# Enable logging
logger:
  level: INFO
  id: logginglevel
# Enable Home Assistant API
api:
  password: !secret api_password
  
# Secure OTA
ota:
esphome:
  name: $devicename
  platform: ESP8266
  board: sonoff_th
  name_add_mac_suffix: true
  on_boot:
    then:
      - switch.turn_on: blue_led_pin
      - climate.control:
          id: climatecontrol
          mode: 'OFF'
          target_temperature: 21
          target_temperature_low: 21
          

switch:
# Relay to control the fan's
- platform: gpio
  pin: GPIO12
  id: fan_relay

#blue LED Pin
- platform: gpio
  id: blue_led_pin
  pin: GPIO13
  inverted: True

#flashing blue led
- platform: template
  optimistic: yes
  id: blue_led_flash
  turn_on_action:
  - while:
      condition:
        lambda: 'return id(climate_action).state = 4.0;'
      then:
      - switch.turn_on: blue_led_pin
      - delay: 500ms 
      - switch.turn_off: blue_led_pin
      - delay: 500ms
  - while:
        condition:
          lambda: 'return id(climate_action).state = 3.0;'
        then:
        - switch.turn_on: blue_led_pin
        - delay: 3000ms 
        - switch.turn_off: blue_led_pin
        - delay: 1000ms
            
  turn_off_action:
  - switch.turn_off: blue_led_pin

# Virtual switch to restart the ESP
- platform: restart  
  id: restart_device

binary_sensor:
# GPIO0 is the button 
- platform: gpio
  pin:
    number: GPIO0
    inverted: True
  id: toggle
# On press switch climate on and off    
  on_press:
      then:
        - if:
            condition:
              lambda: 'return id(climate_mode).state == 0.00000;'
            then:
              - climate.control:
                  id: climatecontrol
                  mode: HEAT
              - logger.log: "Called for Heat"
              - switch.turn_on: blue_led_flash
            else: 
              - climate.control:
                  id: climatecontrol
                  mode: 'OFF'
              - logger.log: "Called for OFF"
              - switch.turn_off: blue_led_flash
              - switch.turn_on: blue_led_pin
# On hold for 5-15s restart ESP
  on_click:
    - min_length: 5000ms
      max_length: 15000ms
      then:  
        - switch.turn_on: restart_device
      
text_sensor:
# Human readable uptime sensor
- platform: template
  name: "${devicename} Uptime"
  id: uptime_human
  icon: mdi:clock-start
- platform: wifi_info
  ip_address:
    name: ${devicename} IP Address
  ssid:
    name: ${devicename} Connected SSID
    icon: mdi:access-point-network
  bssid:
    name: ${devicename} Connected BSSID
  mac_address:
    name: ${devicename} Mac Wifi Address
  
sensor:
# Temp and Humidity sensor on Sonoff HT16
- platform: dht
  model: si7021
  pin: GPIO14
  humidity:
    name: "${devicename} Humidity"
    id: humidity
    icon: mdi:water-percent
  temperature:
    name: "${devicename} Temperature"
    id: temperature
    filters:
      - offset: ${tempoffset}
  update_interval: 10s
  
# WiFi signal sensor   
- platform: wifi_signal
  name: "${devicename} RSSI"
  update_interval: 60s
  icon: mdi:wifi

# Virtual sensor for human readable uptime    
- platform: uptime
  id: uptime_sensor
  update_interval: 300s
  on_raw_value:
    then:
      - text_sensor.template.publish:
          id: uptime_human
          state: !lambda |-
            int seconds = round(id(uptime_sensor).raw_state);
            int days = seconds / (24 * 3600);
            seconds = seconds % (24 * 3600);
            int hours = seconds / 3600;
            seconds = seconds % 3600;
            int minutes = seconds /  60;
            seconds = seconds % 60;
            return (
              (days ? to_string(days) + "d " : "") +
              (hours ? to_string(hours) + "h " : "") +
              (minutes ? to_string(minutes) + "m " : "") +
              (to_string(seconds) + "s")
            ).c_str();


  
# Virtual sensor to get climate mode HEAT/OFF   
- platform: template
  id: climate_mode
  update_interval: 5s
  lambda: 'return id(climatecontrol).mode; '
  name: climate mode
  
# Virtual sensor to get climate action  IDLE/HEATING
- platform: template
  id: climate_action
  update_interval: 2s
  lambda: 'return id(climatecontrol).action; '
  name: climante action
  on_value_range:
    - below: 2.0
      then:
        - switch.turn_off: blue_led_flash
        - switch.turn_on: blue_led_pin
    - above: 2.0
      below: 4.0
      then:
        - switch.turn_off: blue_led_flash
        - switch.turn_on: blue_led_flash
    - above: 3.0
      below: 5.0
      then:
        - switch.turn_off: blue_led_flash
        - switch.turn_on: blue_led_flash



# Heater climate card    
climate:
- platform: thermostat
  name: "${devicename} Climate"
  sensor: temperature
  id: climatecontrol
  visual:
    min_temperature: 10
    max_temperature: 30
    temperature_step: 0.5
  min_idle_time: 1s
  min_heating_off_time: 10s
  min_heating_run_time: 10s
  idle_action:
    - switch.turn_off: fan_relay
  heat_action:
    - switch.turn_on: fan_relay

